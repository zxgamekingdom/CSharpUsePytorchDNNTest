import onnx
import onnxsim
import torch

from nets.deeplabv3_plus import DeepLab
if __name__ == '__main__':
	is_sim = False
	t_input = torch.randn(6, 3, 512, 512).cpu()
	model_onnx_path = "model_data/deeplabv3_plus_mobilenet.onnx"
	input_layer_names = ["images"]
	output_layer_names = ["output"]
	num_classes = 3
	backbone = 'mobilenet'
	downsample_factor = 8
	model = DeepLab(num_classes=num_classes,
					backbone=backbone,
					downsample_factor=downsample_factor,
					pretrained=False)
	model.load_state_dict(torch.load('logs/best_epoch_weights.pth'))
	model = model.cpu()
	torch.onnx.export(model=model,
					  args=t_input,
					  f=model_onnx_path,
					  input_names=input_layer_names,
					  output_names=output_layer_names)
	model_onnx = onnx.load(model_onnx_path)
	onnx.checker.check_model(model_onnx)
	if is_sim:
		model_onnx, check = onnxsim.simplify(
				model_onnx,
				dynamic_input_shape=False,
				input_shapes=None)
		assert check, 'assert check failed'
		onnx.save(model_onnx, model_onnx_path)
	print('done')